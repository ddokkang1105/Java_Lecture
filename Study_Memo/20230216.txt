// this 사용하는 이유
// 멤버변수 명과 파라미터 명이 서로 같을 수도 있기 때문에!!
// this 를 붙이면 무조건 멤버변수 !!
// 안 붙이면 가장 가까운 곳에 있는거 !!

// 생성자 ( Constructor )
//		객체가 만들어질 때 뭔가 작업을 했어야 했다 !
//		=> 생성자 만들기
//		리턴이 아예 없고, 메소드 명이 클래스 명과 같은 메소드
//		생성자를 만들지 않으면 
//			=> 자바 컴파일러가 기본 생성자를 만들어버림
//		생성자를 건드리면..
//			=> 자바 컴파일러가 기본 생성자를 안만들어쥼
//			=> 시스템이 자동으로 객체를 만들 때가 있는데
//				--> 기본 생성자를 씀 --> 에러 !

// 기본 생성자의 역할
// 객체의 값을 초기화하는데 목적 !

// super(); 의 기능
//		: 상위에 있는 기본생성자 불러옴 !

// OOP
//		static - 공오오ㅗㅇ오오급 !
//		생성자
//		객체간의 관계
//			A has a B : 사람 has a 핸드폰 ( 포함관계 )
//			A is a B : 개 is a 동물 ( 상속관계 )

// extends : 상속
// Animal Class를 상속받겠다 !

// @XXX : Annotation => 어떤 기능을 자동으로 연결해준다 !
// override를 사용하려면...
//		상속받은 Class에서의 method명과 같아야 함!

// overloading
//		메소드를 만들 때 같은 기능이라면 메소드명을 같게 !
//		1. 파라미터의 자료형이 다르거나,
//		2. 파라미터의 개수가 달라야 함

// 아무데도 상속을 안 받으면 extends Object

// Constructor 설정
// Window - Preferences - Keys (상단) - General Constructor using Fields
// Ctrl + Shift + Space 설정하기



