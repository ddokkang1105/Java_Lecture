// 랜덤한 숫자 뽑기
//	int i = r.nextInt();		// int 범위안에 있는 랜덤한 정수
//	int i2 = r.nextInt(5);		// 0 ~ 4 중 랜덤한 정수
//	int i3 = r.nextInt(5) + 1;	// 1 ~ 5 중 랜덤한 정수
//		
//	// - 1 ~ 5 중 랜덤한 정수
//	int i4 = (-1) * (r.nextInt(5) + 1);	 

// 함수(Function)
//		관련있는 기능들을 묶어서
//		필요시에 호출하여 사용(용이)

// 프로그램 실행 시 JVM이 main을 자동으로 호출
// main또한 함수의 일종 !

// public static returnType functionName(parameter, parameter, ...) {	
//		-function area-
// 		(return ??;)
// }

// returnType : 반환될 값의 자료형
// 함수 내에서 식이 완성이 되고 나서, main으로 반환할 결과값에 대한 자료형

// 함수명 규칙 -> 변수명 규칙과 유사하다.
// 변수명 	vs   함수명
// 변수명은 명사스럽게, 함수명은 동사스럽게

// 파라미터 (인자, parameter) : 함수를 실행하는 데 필요한 재료
// 필요한 갯수만큼 사용하되, 자료형에 맞춰서 사용을 해야 한다 !


// 지역 변수(local variable)
//		: 함수 내에서 만든 변수
//		그 함수 안에서만 사용 가능 !

// 오버로딩 ( overloading ) 고오급 기수울
// 함수명을 똑같이, 하지만 파라미터만 다르게 !

// 같은 자료형을 써도, 파라미터의 갯수가 다르다면 오버로딩이 가능하다.
// 다른 자료형을 사용하면, 파라미터의 갯수가 같더라도 오버로딩이 가능하다.

// 오버로딩의 대표적인 예시
// System.out.println();

// return (변수)
// 함수 호출 시에 변수를 return한다.
// 그러므로 void 대신에 변수의 자료형 type으로 변경해야 함 !

// 함수를 정의하는 이유

// 가독성
// 오류 발견 용이
// 역할 분리
// 재사용

// main 함수에 코드를 최대한 짧게 구성하기 위해서
// 기능들을 묶어서 함수라는 걸로 사용 !
//		=> 기능을 나눠서 효율적으로 사용 !

// 함수 종류
// 인자 X, 리턴 X
// 인자 X, 리턴 O
// 인자 O, 리턴 X
// 인자 O, 리턴 O

// out 이 표준 출력 장치라 하면
// in 이 표준 입력 장치

// 키보드에서 키 하나를 입력하면
// 숫자로 된 키코드를 읽을 수 있는데
// 그 키코드를 읽을 수 있게 하는 코딩
keyCode = System.in.read();
