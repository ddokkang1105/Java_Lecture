-- 테이블 스페이스 함부로 지우지 말기 !

-- 드디어...! [테이블]을 만들어보자 !
-- 테이블의 기본적인 구조
create table 테이블명(
	컬럼명 자료형 [옵션], -- 옵션 : 필요하면 넣는거 / [] 넣는거 아님
	컬럼명 자료형,
	...
);

-- 자료형 (데이터타입)
-- 크게 3가지의 타입으로 나눌 수 있음

-- 문자형
--			char(용량)
--			무조건 그 용량대로 저장
--			용량이 비어있다면 띄어쓰기로 그 용량을 메꿈
--			처리 속도가 빠르다 ! (용량을 신경쓰지 않아도 되서)
--				ex> 성별, 주민번호, 핸드폰번호, ...

--			varchar2(용량)
--			정해진 용량만큼 데이터를 안 넣어도 
--			그 용량 조절해서 저장
--			용량을 조절하는만큼 처리속도가 느리다 !
--				ex> 이름, 주소, ... (가변되는 값, 정해지지 않은 값들)
--			주력으로 사용 !
-------------------------------------------------------------------------------------------------------------
-- 문자형 용량 
--		varchar2(5) : 5byte
--			영어, 숫자, 띄어쓰기는 1byte
--			한글 한글자는 3byte
--			글자수 계산하기가 애매...

--		varchar2(5 char)
--			한글/영어 5글자 -> 최대 15byte
--	=> 문자형 자료형을 쓸 때는 용량에 char를 넣어서 쓰자 !

create table test(
	t_name varchar2(5)
);

create table test2(
	t_name varchar2(5 char)
);

-- 문자형의 값을 넣을 때는 작은따옴표 사용해서 ! ***
insert into test values('가나다');		-- 용량초과로 인한 에러 발생 !
insert into test2 values('가나다');		-- 성공 !
drop table test cascade constraint purge;
drop table test2 cascade constraint purge;
-------------------------------------------------------------------------------------------------------------
-- 숫자형
--		NUMBER(P, S) : 십진수 기준
--			P : 정밀도 (Precision) / S : 범위 (Scale)
--				P는 소수점 기준 모든 유효숫자를 의미한다.
--				만약 P에 명시한 것보다 더 큰 숫자값을 입력하면 오류가 발생한다.
--				S가 양수면 소수점 이하, 음수면 소수점 이상(소수점 기준 왼쪽)
--				의 유효숫자 자릿수를 나타낸다.
--				S에 명시한 숫자 이상의 숫자를 입력하면, S에 명시한 숫자로 반올림 처리한다.
--				S가 음수면 소수점 기준 왼쪽 자릿수만큼 반올림한다.
--				P가 S보다 크면 S는 소수점 이하 유효숫자 자릿수를 나타낸다.
--			값이 123.54인데 
--			number(3)			-> 오류? 123?		/ 124 (S쪽은 명시하지 않아서 0이라 봐도 무방, 
--															P가 3이라서 소수점 첫자리에서 반올림)
--			number(3, 2)		-> 오류? 123.54?	/ 에러 (P가 3인데 유효숫자가 5자리여서 오류)
--			number(5, 2)		-> 123.54
--			number(7, 1)		-> 123.5
--			number(7, -1)		-> 123? 124?		/ 120 (S가 -1이라서 음수이므로 첫째짜리에서 반올림)


--		FLOAT(P) : NUMBER의 하위타입 + 이진수 기준
create table testNum(
	t_num number(5),
	t_flo float(5)
);
insert into TESTNUM values(12345, 12345);
select * from TESTNUM; -- 12345, 12000
drop table testNum cascade constraint purge;

--	float(5) 라고 하면, 5자리 10진수가 아니라, 5자리 2진수 (ex: 10110)을 의미한다.
--	2진수를 10진수로 변경을 하려면 약 0.3정도를 곱하면 되는데, 
-- 	5 * 0.3 = 약 1.5가 된다.
--	결국 float(5)는 실제로 float(2) (1.5를 반올림해서 2가 되었음)
--	12345 중 앞의 두자리 12만 제대로 나오고, 나머지는 0으로 채워진 상태
--			=> 사실상 오라클에서는 NUMBER형만 사용해도 되며,
--				크기 설정에 있어서 P와 S를 적절히 조절하면 됨 ! ***
-------------------------------------------------------------------------------------------------------------
-- 날짜형
--		Date : 연도, 월, 일, 시, 분, 초까지 입력 가능
--		Timestamp : 연도, 월, 일, 시, 분, 초, 밀리초까지 입력 가능
--	=> 주력은 Date !
--	java.util.Date / java.sql.Date
-------------------------------------------------------------------------------------------------------------
-- [옵션]
-- 제약조건(Constraint) 이라고 부름
-- 데이터 무결성을 보장하기 위한 용도로 사용하는데
-- 데이터 무결성 : 데이터베이스에 저장된 데이터의 일관성과 정확성을 지키는 것

-- 1. 도메인 무결성 제약조건
--		도메인 제약(Domain Constraint)이라고도 하며,
--		테이블 내의 튜플들이 각 속성의 도메인에 지정된 값만 가져야 한다는 조건
--		데이터 타입(type), 널(null / not null), 기본값(default), 체크(check) 등을 활용해서 지정

-- 2. 개체 무결성 제약조건
--		기본키 제약(Primary key Constraint)이라고도 하며,
--		개체 (Entity) : 사람, 장소, 사물, 사건 등과 같이 독립적으로 존재하면서,
--						고유하게 식별이 가능한 단위
--		아무리 많은 개체가 있어도, 내가 원하는 '*유일한*' 개체를 발견할 수 있어야 한다 !
--		테이블은 기본키를 지정하고, Null값을 가져서는 안되며, 
--			테이블 내에 오직 하나의 값만 존재해야한다는 조건

-- 3. 참조 무결성 제약조건
--		외래키 제약(Foreign key Constraint)이라고도 하며,
--		테이블 간의 참조 관계를 선언하는 제약조건
--		참조를 받는 테이블의 외래키는 참조하는 테이블의 기본키와 동일해야 하며,
--		참조를 받는 테이블의 값이 변경될 때, 참조하는 테이블의 제약을 받는 것
-------------------------------------------------------------------------------------------------------------
-- 1. Not Null : NULL은 값이 비어있다는 뜻 !
--					=> 0이나 띄어쓰기도 아닌 정말로 값을 넣지 않은 상태
--				NULL을 허용하지 않는다.
--					=> 필수적으로 입력해야 할 컬럼에 설정한다.
--					=> 가장 많이 사용되는 제약 조건 !
--				: 테이블을 만들 때 가급적이면 값이 들어가게 해줬으면 좋겠음 ! ***

-- 제약조건명을 따로 부여하지 않은 경우 (Oracle이 자동으로 부여)
create table example1(
	col1 varchar2(10 char),
	col2 varchar2(10 char) not null
);
-- Constraint 키워드를 이용해서 제약조건명을 따로 부여하는 경우 (col2_notnull)
create table example2(
	col1 varchar2(10 char),
	col2 varchar2(10 char) constraint col2_notnull not null
);

-- 2. Unique : 단어 뜻 그대로 해당 컬럼에 들어가는 값이 전체 테이블에서 유일해야 한다는 조건
--		NOT NULL과 함께 사용이 가능, BUT ! UNIQUE는 많이 사용되지는 않는다.
create table example3(
	col1 varchar2(10 char) unique,
	col2 varchar2(10 char) unique not null,
	col3 varchar2(10 char),
	constraint col3_unique unique(col3)
);

-- 3. Primary Key (기본 키) : NULL을 허용하지 않고 + 중복된 데이터를 허용하지 않음
--		(NOT NULL + UNIQUE => Primary Key)
--		데이터의 특정 조건을 검색하거나 수정 등의 작업을 할 때 기본키로 구분한다.
--		ID, 주민등록번호, 회원 번호, 글 번호 등이 기본키에 해당한다.
--		일반적으로 테이블에는 1개의 기본키를 무조건 가졌으면 좋겠음 ! ***
create table example4(
	col1 varchar2(10 char) primary key,
	col2 varchar2(10 char) not null,
	col3 varchar2(10 char) not null
);

-- 여러 컬럼을 묶을 때 constraint 키워드를 사용 + 하지만 PK는 가급적 하나였으면 ... !
create table example5(
	col1 varchar2(10 char),
	col2 varchar2(10 char),
	col3 varchar2(10 char),
	constraint PK_example5 primary key(col1, col2)	
);

-- *** 진짜 어려움 !!
-- 4. Foreign Key (외래 키) : 다른 테이블의 특정 컬럼을 조회해서
--							  동일한 데이터가 있는 경우에만 입력이 허용된다 !
--		참조하는 테이블은 PK나 Unique로 지정된 컬럼만을 FK로 지정할 수 있다.
--		외래키 설정을 위해서는 참조받는 컬럼이 먼저 생성되어야 하고,
--		외래키를 심을 테이블이 그 이후에 생성이 되어야 함

-- 외래키를 심을 테이블의 형식
create table 테이블명(
	컬럼명 자료형,
	constraint FK명 foreign key(컬럼명)
		references 대상테이블명(대상테이블의 기본키(OR 고유키) 컬럼명)
		on delete set null || on delete cascade
		-- 참조받는 테이블에서 행 부분을 지웠을 때
		-- 이 테이블에 연결되어 있는 행에 대해서 NULL값을 먹일지
		-- 아니면 그 행도 같이 지울지에 대한 옵션 (둘 중 하나 선택)
);

create table example6(
	ex6_id varchar2(10 char) primary key
);

insert into example6 values('10');
insert into example6 values('20');
insert into example6 values('30');
select * from example6;

create table example7(
	ex7_id varchar2(10 char),
	constraint fk_ex7 foreign key(ex7_id)
		references example6(ex6_id)
		on delete cascade
);

insert into example7 values('10');
insert into example7 values('20');
insert into example7 values('30');
insert into example7 values('40'); -- 안들어가짐 ! (example6에 '40'이라는 값이 없어서 !)
select * from example7;

-- ex6_id가 '10'dls 컬럼을 지우면 어떻게 될까?
delete from example6 where ex6_id = '10';

-- 학과 테이블과 이것을 참조하는 학생 테이블을 만들어보자 !
-- 학과 테이블 : 학과코드(4자리 숫자), 학과 이름(10글자 이내)
create table major(
	major_code number(4) primary key,
	major_name varchar2(10 char) not null
);

-- 학생 테이블 : 학생번호(3자리 숫자), 학생 이름, 학생이 소속되어있는 학과의 코드
-- 그 학과가 없어지면 이 학생의 정보도 지워지게
create table student(
	stu_no number(3) primary key,
	stu_name varchar2(6 char) not null,
	stu_code number(4),
	constraint fk_stu foreign key(stu_code)
		references major(major_code)
		on delete cascade
);
--drop table student cascade constraint purge;
insert into major values(1105, 'Math');
insert into major values(2105, 'Korean');
select * from major;

insert into student values(100, '김길동', 1105);
insert into student values(101, '최길동', 1105);
insert into student values(102, '이길동', 1105);
insert into student values(200, '박길동', 2105);
insert into student values(201, '오길동', 2105);
insert into student values(202, '정길동', 2105);
select * from student;

delete from major where major_code = '2105';

-------------------------------------------------------------------------------------------------------------
-- 풀이 --
create table major(
	m_code number(4) primary key,
	m_name varchar2(10 char) not null
);

insert into major values(1001, '컴퓨터 공학과');
insert into major values(2001, '법학과');

select * from major;

create table student(
	s_num number(3) primary key,
	s_name varchars(17 char) not null,
	s_code number(4) not null
		constraint fk_student foreign key(s_code)
			references major(m_code)
			on delete cascade
);

insert into student values(101, 'kkk', 1001);
insert into student values(102, 'lll', 1001);
insert into student values(103, 'ooo', 2001);
insert into student values(104, 'ppp', 2001);

select * from student;

delete from major where m_code = 1001;
-- major 테이블에서 1001 코드를 지우면, student 테이블에서 1001 코드를 가지고 있던
-- 모든 학생의 정보가 지워짐 !!
-------------------------------------------------------------------------------------------------------------
-- 5. Check : 데이터의 값의 범위나 조건을 설정해서 조건에 해당하는 데이터만 허용함.
create table example8(
	col1 number(3) constraint ex8_check check (col1 between 1 and 9)
);

insert into example8 values(10);	-- 1 ~ 9 사이의 숫자가 아니라서 오류 !
drop table example8 cascade constraint purge;
-------------------------------------------------------------------------------------------------------------
-- 6. default : 아무런 데이터를 입력하지 않은 경우 지정한 데이터가 자동으로 입력된다.
create table example9(
	col1 number(4) default 999
);

insert into example9 values(default);
insert into example9 values(null);
insert into example9 values(0);
insert into example9 values(11);

select * from example9;
drop table example9 cascade constraint purge;
-------------------------------------------------------------------------------------------------------------
-- 커피 테이블
-- 커피 이름 / 가격 / 칼로리 / 제조일자
create table coffee(
	c_name varchar2(15 char) primary key,
	c_price number(5) default 5000,
	c_kcal number(4, 1) not null,
	c_start date not null
);

insert into coffee values('아메리카노', 3000, 20.1, sysdate);
select * from coffee;

-- DDL에서 Create 문을 다룰 수 있게 되었음 !
-- 이제 비교적 쉬운 ALTER / DROP / TRUNCATE를 보자 ~

-------------------------------------------------------------------------------------------------------------
-- ALTER --
-- 데이터 타입 변경 / 컬럼의 크기(용량) 변경
alter table [테이블명] modify [컬럼명] [데이터타입(용량)];

-- 값이 있는 상태에서 데이터타입을 변경하면 에러 !
alter table coffee modify c_name number(3);

-- 값이 있는 상태에서 용량을 적게 변경하면 에러 !
alter table coffee modify c_name varchar2(2 char);

-- 주의 사항 : 데이터타입을 변경할 때는 해당 컬럼의 값을 모두 지워야 변경이 가능하다 !
--		그렇지 않으면 오류가 발생 !
--		컬럼의 용량을 줄일 경우 해당 컬럼의 용량을 조회해서 변경할 길이보다
--		큰 값이 있는지 확인하고 => 그 값을 변경

-- dec coffee;

-- 컬럼명 변경
alter table [테이블명] rename column [기존 컬럼명] to [바꿀 컬럼명];
alter table coffee rename column c_name to c_name2;

-- 컬럼 추가
alter table [테이블명] add [컬럼명] [데이터타입] [제약조건(생략가능)];

-- 기존에 데이터가 없어야 not null 가능 O
alter table coffee add c_taste varchar2(20 char) not null;

-- 컬럼 삭제
alter table [테이블명] drop column [컬럼명];
alter table coffee drop column c_taste;
-------------------------------------------------------------------------------------------------------------
-- TRUNCATE -- DROP -- ETC --
-- 테이블 내의 내용을 지우기
truncate table [테이블명];
truncate table coffee;
select * from coffee;
-- 테이블에 있는 데이터를 삭제하지만, 테이블의 구조 자체는 삭제하지 않음 !

-- 테이블 삭제 (휴지통에 넣기)
drop table [테이블명] cascade constraint;
drop table coffee cascade constraint;
select * from coffee;

-- 테이블 복원 (휴지통에서 복원)
flashback table [테이블명] to before drop;
flashback table coffee to before drop;
select * from coffee;

-- 휴지통 비우기
purge recyclebin;

-- 휴지통에 넣기 + 비우기 => 테이블 완전 삭제 (SHIFT + DELETE)
drop table [테이블명] cascade constraint purge;
drop table coffee cascade constraint purge;
select * from coffee;
-------------------------------------------------------------------------------------------------------------
-- DDL : 사실상 신입한테 맡기지 않음 !
-- 경력있는 DBA들이 테이블을 만들어서 CRUD정도만 하게끔 할 것 !!
-------------------------------------------------------------------------------------------------------------
-- 1. 노트북에 대한 테이블을 생성...
-- 노트북의 이름 / 가격 / CPU / RAM / HDD / 보증기간을 속성으로 갖게 하고 싶음
-- 조건에 부합하는 테이블을 생성하는 문장
-- [하나의 기본키(PK)를 가져야하고, 모든 값은 채워넣어야 함]

-- 2. 노트북의 사양이 좋아져서 128GB 짜리 RAM을 사용하게 되었음
-- 이 때 RAM 컬럼의 용량을 변경하는 문장

-- 3. 노트북의 크기에 대한 컬럼을 추가하는 문장 작성
-- [단위 cm, 소수점 두번째 짜리까지 나타낼 것]
-- [이 컬럼은 빈 값으로 넣을 수 없음]

-- 4. 노트북에는 앞으로 HDD대신에 SSD가 장착됨
-- HDD 컬럼의 이름을 SSD 컬럼명으로 변경하는 문장 작성

-- 5. 보증기간 컬럼을 삭제하는 문장 작성

-- 6. 노트북의 가격이 [800000 ~ 2300000] 사이의 값만 들어갈 수 있게끔
-- 해당 컬럼을 변경하는 문장 작성

-- 7. 만든 테이블을 완전히 삭제하는 문장 작성
-------------------------------------------------------------------------------------------------------------
create table laptop(
	l_name varchar2(20 char) primary key,
	l_price number(7) not null,
	l_cpu varchar2(12 char) not null,
	l_ram varchar2(4 char) default '8GB',
	l_hdd varchar2(5 char) default '100GB',
	l_repair varchar2(2 char) default '1년'
);

select * from laptop;

-- 2. 노트북의 사양이 좋아져서 128GB 짜리 RAM을 사용하게 되었음
-- 이 때 RAM 컬럼의 용량을 변경하는 문장
alter table laptop modify l_ram varchar2(5 char) default '8GB';

-- 3. 노트북의 크기에 대한 컬럼을 추가하는 문장 작성
-- [단위 cm, 소수점 두번째 짜리까지 나타낼 것]
-- [이 컬럼은 빈 값으로 넣을 수 없음]
alter table laptop add l_size number(5, 2) not null;
select * from laptop;

-- 4. 노트북에는 앞으로 HDD대신에 SSD가 장착됨
-- HDD 컬럼의 이름을 SSD 컬럼명으로 변경하는 문장 작성
alter table laptop rename column l_hdd to l_ssd;
alter table laptop modify l_ssd varchar2(4 char) default '1TB';
select * from laptop;

-- 5. 보증기간 컬럼을 삭제하는 문장 작성
alter table laptop drop column l_repair;
select * from laptop;

-- 6. 노트북의 가격이 [800000 ~ 2300000] 사이의 값만 들어갈 수 있게끔
-- 해당 컬럼을 변경하는 문장 작성
-- alter table laptop modify l_price number(7) (l_price between 800000 and 2300000);
alter table laptop modify l_price number(7) check (l_price between 800000 and 2300000);
alter table laptop modify l_price number(7) constraint l_price2 check (l_price between 800000 and 2300000);
-- 제약 조건 삭제
alter table laptop DROP CONSTRAINT l_price2 CASCADE;
-- 
select * from laptop;

-- 데이터 입력
insert into laptop values('Test Laptop', 2199999, 'RYZEN-5600X', '128GB', default, 200.11);
truncate table laptop;
select * from laptop;

-- 7. 만든 테이블을 완전히 삭제하는 문장 작성
drop table laptop cascade constraint purge;
-------------------------------------------------------------------------------------------------------------



















































