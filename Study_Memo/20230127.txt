// 옆사람한테 인사할 때
// 다양한 언어를 사용(한국어, 영어, 일본어 등등)

// 프로그래밍 언어
//	JAVA
//	Python
//	C

// 고급언어
// 컴퓨터가 자동으로 처리

// Python
// JavaScript
// Java
// Go
// C

// 저급언어
// 개발자가 하나하나 처리

// 프로그래밍
// 컴퓨터가 일을 할 수 있도록 언어로 이루어진 명령어들의 집합(프로그램)을 만드는 것

// 전 세계적으로 많이 쓰는 프로그래밍 언어
// 개발자들이 작업한 결과물들을 가져다 사용하자!

// Java -> 처음 프로그래밍 언어로 시작하기에는 적당한 언어!

// TIOBE 사이트
// 1위 Python
// 2위 C
// 3위 C++
// 4위 Java

// JDK(Java Development Kit) == JRE(Java Runtime Environment) + 개발키트
// JVM(Java Virtual Machine)
// 자바 가상머신을 이용해서 개발을 할 수 있는 환경을 만드는 것이 JRE

// Google -> openjdk github
// https://github.com/ojdkbuild/ojdkbuild
// 1.8.0_332 version download
// LTS(Long Term Support) - 장기 지원

// WORA
// Write Once, Run Anywhere
// 자바 가상머신이 있으면 어느 운영체제에서도 동일하게 동작이 가능

// 메모장에 자바 소스 코드 입력후에 모든 파일, .java 확장자로 저장
// 저장된 폴더 주소에 cmd 입력후에 cmd 창에 javac.exe Hello.java 입력
// Hello.class 파일이 생성됨
// 이후 java.exe Hello 입력하면 Hello 함수를 출력함

// 사용자가 만든 java소스(.java)들은 바로 기계어로 변환될 수 없다.
// 기계어로 변환되기전 .class 확장자명을 가진 바이트 코드 파일로 변환되어야 한다. 
// 즉, 컴파일 작업을 해줘야 하는데 이 컴파일러 역할을 하는 파일이 바로 javac.exe 파일인 것이다.
// 이후 기계어(ByteCode)로 변환되기 위해 Java 가상머신이 구동되어야 하는데
// 컴파일러를 통해 생성된 class파일을 가지고 기계어를 만드는 작업을 java.exe가 해주게 된다.

// java.exe : JVM을 구동시키기 위한 명령 프로그램
// javac.exe : *.java 파일을 컴파일 하기 위한 java 컴파일러

// 킹모장으로 계속 타이핑하기에는 너무 귀찮다 !
// -> 통합 개발환경(IDE, Integrated Development Environment) 설치 !
// google - eclipse - download pakages - more download - 202202	click
// Eclipse IDE for Enterprise Java and Web Developers	download

// Eclipse 실행환경 조성(설치한 Java version<1.8.0_332 version> 적용)
// Eclipse - Window - Java - Installed JREs	click
// 원래 있는거 Remove & Add -> next  -> directory에서	C:\Program Files\ojdkbuild	폴더 선택
// finish & apply
// Java - compiler - compiler compilance level - 1.8 - apply 
// General - Workspace - Text file encoding - Other - EUC-KR - apply
// General - Appearance - Thema - dark
// General - Appearance - Colors and Fonts - Basic - Text font(맨아래) - d2cording font download
// apply and close - 설정 끝 !

// Create a project - java project - name 
// class 생성

// 주석처리(comment) : 필기, 기능설명 용도
/*
 * 여러줄
 * 주석
 * 처리
 * 방법
 */
	
/**
 * 다른 사람에게 보여주기 위한 설명서
 * @version 1.1.10
 * @author Beaver
 */

// Create a project - java project - name
// class 생성

// Encoding
// 사람이 입력한 글자를 컴퓨터가 사용할 수 있게 특정한 전기신호로 바꿔주는 것

// 알아두면 유용한 단축키
// Ctrl + m : 콘솔창 확대
// Ctrl + Shift + / : 여러줄 주석 처리
// Ctrl + / : 한줄 주석 처리
// Ctrl + Alt + 방향키(위, 아래) : 해당 줄을 위, 아래로 복사
// Alt + 방향키(위, 아래) : 해당 줄을 위, 아래로 이동
// Ctrl + Shift + +/- : 글자를 키우거나 줄일때
// Ctrl + d : 해당 줄 삭제
// Ctrl + spacebar : 자동 완성
// Ctrl + Shift + f : 코드 줄정리
// Ctrl + F11 : 파일 실행 

// main Ctrl + sapcebar
// syso Ctrl + spacebar

// Escape Sequence
// : 특수한 문자나 특수한 기능을 표현할 떄
// \ 역 슬래시를 사용 !
// \t : Tap 키의 기능
// \n : New Line(줄만 맞추는 용도)
// \r : Carriage Return (커서를 맨 앞으로)
// \r\n : Enter키
// \b : Backspace키(1 byte만 지움)

// 가볍게 확인용도로 사용하는 콘솔창이라 \r \n 둘 중에 하나만 있어도 Enter키 처리가 가능하지만
// 파일처리할 시에는 \r, \n 하나만 쓰면 이상하게 표현된다.

// \\ : \를 글자로
// \' , \" : ', " 를 글자로

// printf (Formatting - 형식 지정)
// System.out.println("%?", 값); 의 형태

// 정수 (decimal)
// %d : 정수데이터가 들어올 자리 -> 모든 언어 공통 !
// %xd(x는 숫자) : 숫자 자리가 띄워쓰기로 채워져서 출력
// %0xd : 0으로 채워서 x자리의 숫자로 만들어줌(숫자포함)

System.out.printf("%d\n", 1);
System.out.printf("%3d\n", 1);
System.out.printf("%010d\n", 1);

// 실수(float)
// %f : 실수 데이터가 들어올 자리
// %.xf : x만큼의 소수점 이하의 자릿수 (잘리는 부분은 반올림처리)
// -> x의 자릿수가 입력값의 자릿수보다 클 때는 자릿수를 0으로 채움

System.out.printf("%f\n", 123.456789);
System.out.printf("%.3f\n", 123.456789);
System.out.printf("%.10f\n", 123.456789);

// 문자열 (String)
// %s : 글자 데이터가 들어올 자리
// 숫자 : 그냥 입력하면 된다
// 글자 : "" 사용하여 입력

System.out.printf("%s\n", 2314);
System.out.printf("%s\n", "java");
String a = "1234";
String b = "1234";
String c = a + b;
System.out.println(c);

System.out.println();
System.out.printf("%4d%s-%02d%s-%02d%s\n", 2023, "년", 1, "월", 27, "일");
System.out.printf("%s : %s\n", "날씨", "추움");
System.out.printf("%s : %d%s\n", "기온", -4,"도");
//System.out.printf("%s : %.2f%s\n", "습도", 50.24, "%");
// %% : printf 함수에서 %를 문자로 나타내고 싶을 때 사용
System.out.printf("%s : %.2f%%\n", "습도", 50.24);

Thread.sleep(10000);
10초동안 실행하다가 정지


**날짜 가져오기**
import java.time.LocalDate;
import java.time.ZoneId;

// LocalDate.now();
// 시스템에 default로 지정된 시간과 타임존을 이용하여 현재 날짜를 가져옵니다.

// LocalDate.now(ZoneId.of("Europe/Paris"));
// 시스템 시계의 날짜를 Europe/Paris의 타임존을 적용하여 가져옵니다.

LocalDate nowDate = LocalDate.now();	
LocalDate parisNowDate = LocalDate.now(ZoneId.of("Europe/Paris"));
		
System.out.println(nowDate);
System.out.println(parisNowDate);


**시간 가져오기**
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

// LocalTime.now();
// LocalTime 클래스를 이용하여 현재 시간을 구할 수 있습니다.

// DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH시 mm분 ss초");
// String formatedNow = now.format(formatter);
// LocalDate 예제와 마찬가지로 DateTimeFormatter 클래스를 이용하여
// 시간을 원하는 포맷의 문자열로 변환할 수 있습니다.

LocalTime nowTime = LocalTime.now();
		
System.out.println(nowTime);
		
// 포맷 정의하기
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH시 mm분 ss초");
		
// 포맷 적용하기
String formatedNow = nowTime.format(formatter);
		
// 포맷 적용된 현재시간 출력
System.out.println(formatedNow);




