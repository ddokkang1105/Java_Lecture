// 현재 시간을 밀리초롤 나타내주는 기능 :
// System.currentTimeMillis();
// 절대값 구하기 : Math.abs();
// Scanner 이용해서 입력
//		keyboard.next(); vs keyboard.nextLine();
//		next()는 공백(space) 전까지 입력받은 문자열을 반환하는 기능
//		nextLine()은 개행문자(Enter)를 치기 전까지 입력받은 문자열을 반환하는 기능

// 절차지향 프로그래밍 (Procedural Programming)
//		순서대로 잘 프로그래밍해서 결과를 잘 내자 !
// 		변수 하나 덜 쓰고, 코드 줄이고.. 효율적으로 코드를 짰다 !
//		조건문, 반복문, ...
//		장점 : 처리속도, 실행속도가 빠르다.

// 객체지향 프로그래밍 (Object-Oriented Programming)
//		
//		객체(object) : 실생활에 존재하는 모~~~~~든 것 (흔히 물건이라고 말할 수 있는 것들)
//			( = 인스턴스(instance) : class에서 만들어진 객체를 해당 클래스의 인스턴스)

// 		붕어빵을 만드려면			붕어빵 틀이 필요 !
//		객체를 만드려면 			class 라는 것이 필요 !
//	객체를 사용해서 하나의 완성품을 만들어내는 프로그래밍 기법이
//		=> 객체지향 프로그래밍
//		=> 앞으로는 class를 엄청 만들 것 !

//	객체의 속성 : 멤버 변수(member variable, attribute, field)
// 	객체가 만들어질 때 각 자료형들의 기본값으로 자동으로 초기화 됨.

// function - 클래스 밖에 만든 것 - X (사실상 Java에는 function이라는 용어가 없음 !!)
// method		- class 속에 만든 것 ( classs에 종속적인 함수라고 표현 )
//			- 여태까지 써온건 다 method 였다 !!

// 라이브러리 Class ( API : Application Program Interface)
//		: 다른 Class에서 이용할 목적
// 프로그램에서 실행되는 Class가 여러개, 단 하나를 빼고는 전부 라이브러리용 Class !
//		제외된 하나의 Class : 실행용 Class (Main)

// 		변수 : 생성자, 메소드 내에서만 사용되고,
//				생성자, 메소드 실행이 종료되면 함께 자동으로 사라짐

//		멤버변수 / 필드 : 생성자, 메소드 전체에서 사용이 가능
//							객체가 소멸되지 않는 한 객체와 함께 공존함

// 초기값이 지정되지 않은 멤버변수는 객체 생성시 자동으로 초기 기본값을 설정

// 실행용 Class : 프로그램 실행을 위한 main() method를 제공하는 역할
// 			=> 여기에 라이브러리 Class의 객체를 생성하면
//				라이브러리 Class의 객체를 참조(주솟값 형태)했다. 라고 함
// 객체를 참조할 시에 완전히 독립적인 서로 다른 객체를 만들기 위해서는
// new 클래스이름(); 선언 후에
// 다시 새로운 데이터를 넣어주어야 한다.

// ???
//		???
// Stack
//		변수를 만들때마다 아래에서부터 차곡차곡 쌓임
//		프로그램이 종료되면 알아서 다 정리
// Heap
//		컴퓨터가 적당하다고 판단한 위치에 만든다
//		자동정리 X ( 핸드폰 메모리 정리느낌으로 정리를 해야함... )

// Garbage Collection : Heap 영역 자동정리 시스템 (** 면접 **)
//		C나 C++에서는 가비지 컬렉션이 없어서 개발자가 수동으로 
//		메모리 할당 및 해제를 하나하나 해줬어야 했다.
//		Java는 JVM에 탑재되어 있는 가비지 컬렉터가
//		메모리 관리를 대행해주기 때문에...
//		개발자 입장에서는 관리, 메모리 누수 문제에 대해서 신경 안써도 되어서
//		오롯이 개발에만 집중할 수 있다는 장점 !
//		언제 발동 ? - 그 번지에 더이상 접근할 방법이 없어지면 발동 !
//		(객체의 정보가 사라지는 시점)
//		단점 : 직접 눈으로 볼 수 없음..
//		System.gc(); 라는 기능으로 정리할 수 있지만...
//			=> 호출해서 사용하는거 자체가 시스템 성능에 영향을 많이 줌 ( 절대 사용 X )

// 프로그램이 종료되면 Stack 영역이 날아가고
// 		=> Heap 영역에 접근을 못하게 되어서 가비지 컬렉션 발동 !

