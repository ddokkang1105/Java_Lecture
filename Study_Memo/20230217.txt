// 생성자 (Java)
//		1. 클래스에 생성자가 하나도 없으면
//		자바 컴파일러가 생성자를 만들어줌 !
//		2. 하위클래스 객체를 만들면 (Pen)
//		상위 클래스 기본생성자(Product)를
//		자동으로 호출

// super(파라미터)를 가진 생성자를 생성 시
// 기본생성자가 생기지 않기 때문에
// 기본생성자를 사용할 수 없다 !!

// 하위 클래스가 상위 클래스를 상속 받을 때
// 변수를 설정이 없으면...
// 생성자 오버로딩 시에 직접 입력 해주어야 한다..

// 패키지 : 클래스 명이 중복 될 때 구별할 수 있는 수단 !
//		모든 클래스는 패키지에 넣을 수 있도록 !!


// 패키지 명이 중복 ? 똑같으면...? => 방법이 없음...
//		=> 전 세계적으로 패키지명이 중복 안되게
//		com.회사명.프로그램명.카테고리 (소문자)

// 객체
//		패키지명.클래스명 변수(객체)명 = new 패키지명.생성자();

// 객체 만들때 패키지명을 생략 가능한 경우
//		- 자바 기본 패키지 소속
//		- java.lang
// java.lang.String s1 = " ";

//	- 같은 패키지 소속
//	패키지명.클래스명 변수명 = new 패키지명.클래스명;
//	클래스명 변수명 = new 클래스명;

//	- 다른 패키지 소속
//	패키지명.클래스명 변수명 = new 패키지명.클래스명;
//	클래스명 변수명 = new 클래스명; -> import
//		=> import 시에 클래스명이 겹쳐도 그 클래스명만 사용가능
//		=> 이름 겹치는 다른 거는 풀 버전으로 써줘야함.

// 접근 제어자 ( Access Modifier )
//	멤버변수 또는 클래스에서 사용
//	외부에서 접근하지 못하도록 제한하는 역할
//		=> 뭐에 대한 접근 ... ?
//		=> 멤버변수나 클래스에 !!

// Feb17_5_Encapsulation 부분 중요 !!!!

// 캡슐화 ( Encapsulation )
//		멤버변수에 접근할 수 있는 통로 ! 를 만들고 그 통로에 안전장치를 하는 개념 !
//		즉 ! 외부에 노출을 할 필요가 없는 정보들을 캡슐처럼 감싸서 '은닉'하는 기능

// 정리 !

// 단축키 심기
//		Window - Preferences - Keys - generate 
//		- Generate getters and setters - Ctrl + Shift + z

// 1. 멤버 변수 ( 외부에서 접근 안되도록 private !! )
// 2. 기본 생성자
// 3. 생성자 오버로딩
// 4. getter / setter

// abstract method : 미완성된 메소드 ( 내용이 없는 )
// 하위클래스에서 반드시 !! 오버라이딩해서 사용해야 !!

// abstract method 가 하나라도 있으면 
// abstract 클래스 or interface 여야 함 ! 

// 클래스 : 멤버변수, 메소드

// 추상클래스 : 멤버변수, 메소드, 추상메소드
//					=> 객체생성 불가능 !

// 인터페이스 : 추상메소드, 멤버 상수
//					=> 객체생성 불가능 !

// 클래스끼리는 다중상속 X ( 1 : 1 )
// 클래스 + 인터페이스는 다중상속 O !

// 추상 메소드 객체 생성
// Avengers로부터 상속받은..
// 클래스명은 모름
// 내부에 만들어 놓은 클래스
// 단 한 번만 사용될 수 있고, 오직 하나의 객체만을 사용할 수 있는 1회용 클래스
//	( = 다른 곳에서 불러올 수 없음)
	
// 익명 내부 클래스(anomy inner class)
public static void main(String[] args) {
	Avengers a = new Avengers("Peter", 19) {
		
		@Override
		public void attack() {
			System.out.println("spider man ~ ~ ");
		}
	};

// 다형성 ( Polymorphism )
// Poly + Morph
// 같은 형태이지만 다른 기능을 할 수 있는 ... ! (Overriding과 밀접한 관련)

// Feb17_8_FactoryPattern/src/com.ddokkang.feb178.register.Academy.class
public Student consult(String name, int age) {
	studentCount++;
	Student s = new Student(studentCount, name, age);
	return s;
}
	
// Feb17_8_FactoryPattern/src/com.ddokkang.feb178.main.FMain1.class	
Academy ac = new Academy();

Student s1 = ac.consult("aa", 20);
s1.printInfo();
System.out.println("=======================");



